name: fastapi

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write 
  contents: read  


  
  
  

jobs:
  build:
    runs-on: ubuntu-latest
      
    steps:
      - name: .env File create
        run: |
          echo "MONGO_USERNAME=$MONGO_USERNAME" >> .env
          echo "MONGO_PASSWORD=$MONGO_PASSWORD" >> .env
          echo "MONGO_HOST=$MONGO_HOST" >> .env
          echo "MONGO_PORT=$MONGO_PORT" >> .env

        env:
          AWS_REGION: ap-northeast-2
          ECR_REPOSITORY: hellody_read  
          ECS_SERVICE: hellodyReadServer  
          ECS_CLUSTER: hellodyRserver                 
          ECS_TASK_DEFINITION: ./task-definition.json
          CONTAINER_NAME: hellody_read
          MONGO_USERNAME: ${{secrets.MONGO_USERNAME}}
          MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
          MONGO_HOST: ${{secrets.MONGO_HOST}}
          MONGO_PORT: ${{secrets.MONGO_PORT}}

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with: 
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Docker Compose
        run: docker-compose build
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::730335352929:role/fastapicicid
          role-session-name: sampleSessionName
          aws-region: ap-northeast-2


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
  
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

